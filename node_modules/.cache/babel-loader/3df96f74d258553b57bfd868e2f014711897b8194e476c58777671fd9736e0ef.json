{"ast":null,"code":"/**\n * Price visibility logic - determines which cards show prices vs \"Check Price\" buttons.\n * As specified in the PRP, ~10% of cards should show visible prices.\n *//**\n * Determine if price should be visible for a given deal ID\n * Uses hash-based approach for consistent results\n */export function shouldShowPrice(dealId){// Use hash of deal ID to determine visibility\nconst hash=simpleHash(dealId);// Show price for ~10% of deals (hash ending in specific digits)\nreturn hash%10===0;}/**\n * Simple hash function for consistent price visibility\n */function simpleHash(str){let hash=0;for(let i=0;i<str.length;i++){const char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32-bit integer\n}return Math.abs(hash);}/**\n * Custom hook for price visibility with local storage persistence\n */export function usePriceVisibilityState(){const getVisibilityOverrides=()=>{try{const stored=localStorage.getItem('priceVisibilityOverrides');return stored?JSON.parse(stored):{};}catch(_unused){return{};}};const setVisibilityOverride=(dealId,visible)=>{try{const overrides=getVisibilityOverrides();overrides[dealId]=visible;localStorage.setItem('priceVisibilityOverrides',JSON.stringify(overrides));}catch(_unused2){// Silently fail if localStorage is not available\n}};const clearVisibilityOverrides=()=>{try{localStorage.removeItem('priceVisibilityOverrides');}catch(_unused3){// Silently fail if localStorage is not available\n}};const isPriceVisible=dealId=>{const overrides=getVisibilityOverrides();// Check for manual override first\nif(dealId in overrides){return overrides[dealId];}// Use default hash-based logic\nreturn shouldShowPrice(dealId);};return{isPriceVisible,setVisibilityOverride,clearVisibilityOverrides};}/**\n * Get price visibility statistics for debugging/admin\n */export function getPriceVisibilityStats(dealIds){const visible=dealIds.filter(shouldShowPrice).length;const total=dealIds.length;const hidden=total-visible;const percentage=total>0?visible/total*100:0;return{total,visible,hidden,percentage:Math.round(percentage*10)/10// Round to 1 decimal\n};}/**\n * Batch update price visibility for multiple deals\n */export function updateBatchPriceVisibility(dealIds){let visiblePercentage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const visibilityMap={};const targetVisible=Math.round(dealIds.length*visiblePercentage/100);// Sort deal IDs by hash to ensure consistent selection\nconst sortedIds=dealIds.map(id=>({id,hash:simpleHash(id)})).sort((a,b)=>a.hash-b.hash).map(item=>item.id);// Mark first N deals as visible based on target percentage\nsortedIds.forEach((id,index)=>{visibilityMap[id]=index<targetVisible;});return visibilityMap;}","map":{"version":3,"names":["shouldShowPrice","dealId","hash","simpleHash","str","i","length","char","charCodeAt","Math","abs","usePriceVisibilityState","getVisibilityOverrides","stored","localStorage","getItem","JSON","parse","_unused","setVisibilityOverride","visible","overrides","setItem","stringify","_unused2","clearVisibilityOverrides","removeItem","_unused3","isPriceVisible","getPriceVisibilityStats","dealIds","filter","total","hidden","percentage","round","updateBatchPriceVisibility","visiblePercentage","arguments","undefined","visibilityMap","targetVisible","sortedIds","map","id","sort","a","b","item","forEach","index"],"sources":["C:/Users/dan/Desktop/guru2/src/utils/priceVisibility.ts"],"sourcesContent":["/**\n * Price visibility logic - determines which cards show prices vs \"Check Price\" buttons.\n * As specified in the PRP, ~10% of cards should show visible prices.\n */\n\n/**\n * Determine if price should be visible for a given deal ID\n * Uses hash-based approach for consistent results\n */\nexport function shouldShowPrice(dealId: string): boolean {\n  // Use hash of deal ID to determine visibility\n  const hash = simpleHash(dealId);\n  \n  // Show price for ~10% of deals (hash ending in specific digits)\n  return hash % 10 === 0;\n}\n\n/**\n * Simple hash function for consistent price visibility\n */\nfunction simpleHash(str: string): number {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash);\n}\n\n/**\n * Custom hook for price visibility with local storage persistence\n */\nexport function usePriceVisibilityState() {\n  const getVisibilityOverrides = (): Record<string, boolean> => {\n    try {\n      const stored = localStorage.getItem('priceVisibilityOverrides');\n      return stored ? JSON.parse(stored) : {};\n    } catch {\n      return {};\n    }\n  };\n\n  const setVisibilityOverride = (dealId: string, visible: boolean): void => {\n    try {\n      const overrides = getVisibilityOverrides();\n      overrides[dealId] = visible;\n      localStorage.setItem('priceVisibilityOverrides', JSON.stringify(overrides));\n    } catch {\n      // Silently fail if localStorage is not available\n    }\n  };\n\n  const clearVisibilityOverrides = (): void => {\n    try {\n      localStorage.removeItem('priceVisibilityOverrides');\n    } catch {\n      // Silently fail if localStorage is not available\n    }\n  };\n\n  const isPriceVisible = (dealId: string): boolean => {\n    const overrides = getVisibilityOverrides();\n    \n    // Check for manual override first\n    if (dealId in overrides) {\n      return overrides[dealId];\n    }\n    \n    // Use default hash-based logic\n    return shouldShowPrice(dealId);\n  };\n\n  return {\n    isPriceVisible,\n    setVisibilityOverride,\n    clearVisibilityOverrides,\n  };\n}\n\n/**\n * Get price visibility statistics for debugging/admin\n */\nexport function getPriceVisibilityStats(dealIds: string[]): {\n  total: number;\n  visible: number;\n  hidden: number;\n  percentage: number;\n} {\n  const visible = dealIds.filter(shouldShowPrice).length;\n  const total = dealIds.length;\n  const hidden = total - visible;\n  const percentage = total > 0 ? (visible / total) * 100 : 0;\n\n  return {\n    total,\n    visible,\n    hidden,\n    percentage: Math.round(percentage * 10) / 10, // Round to 1 decimal\n  };\n}\n\n/**\n * Batch update price visibility for multiple deals\n */\nexport function updateBatchPriceVisibility(\n  dealIds: string[], \n  visiblePercentage: number = 10\n): Record<string, boolean> {\n  const visibilityMap: Record<string, boolean> = {};\n  const targetVisible = Math.round((dealIds.length * visiblePercentage) / 100);\n  \n  // Sort deal IDs by hash to ensure consistent selection\n  const sortedIds = dealIds\n    .map(id => ({ id, hash: simpleHash(id) }))\n    .sort((a, b) => a.hash - b.hash)\n    .map(item => item.id);\n  \n  // Mark first N deals as visible based on target percentage\n  sortedIds.forEach((id, index) => {\n    visibilityMap[id] = index < targetVisible;\n  });\n  \n  return visibilityMap;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}